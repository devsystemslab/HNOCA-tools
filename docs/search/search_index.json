{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"api/map/AtlasMapper/","title":"AtlasMapper","text":""},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper","title":"<code>hnoca.map.mapper.AtlasMapper</code>","text":""},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.compute_wknn","title":"<code>compute_wknn(ref_adata=None, k=100, query2ref=True, ref2query=False, weighting_scheme='jaccard_square', top_n=None)</code>","text":"<p>Compute the weighted k-nearest neighbors graph between the reference and query datasets</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.compute_wknn--parameters","title":"Parameters","text":"<p>k : int     Number of neighbors per cell query2ref : bool     Consider query-to-ref neighbors ref2query : bool     Consider ref-to-query neighbors weighting_scheme : str     How to weight edges in the ref-query neighbor graph top_n : int     The number of top neighbors to consider</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.get_matched_expression","title":"<code>get_matched_expression(rescale_factor=1)</code>","text":"<p>Get the expression of reference cells matched to query cells. This can be used for quantitative comparisons like DE analysis.</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.get_matched_expression--parameters","title":"Parameters","text":"<p>layer: str     If not None, uses this as the key in adata.layers to return the reference transcriptome. rescale_factor: str     Factor to rescale the log-normalized counts</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.get_presence_scores","title":"<code>get_presence_scores(split_by=None, random_walk=True, alpha=0.1, n_rounds=100, log=True)</code>","text":"<p>Estimate the presence score of the query dataset</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.get_presence_scores--parameters","title":"Parameters","text":"<p>split_by : str     The column in the query dataset to split by random_walk : bool     Whether to use random walk to estimate presence score alpha : float     The heat diffusion parameter for the random walk n_rounds : int     The number of rounds for the random walk log : bool     Whether to log the presence score</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.load","title":"<code>load(input_dir)</code>  <code>classmethod</code>","text":"<p>Load the mapper object from disk</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.load--parameters","title":"Parameters","text":"<p>input_dir : str     The directory to load the mapper object</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.map_query","title":"<code>map_query(query_adata, retrain='partial', **kwargs)</code>","text":"<p>Map a query dataset to the reference dataset</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.map_query--parameters","title":"Parameters","text":"<p>query_adata : AnnData     The query dataset to map to the reference dataset query_model : str     The model to use for the query dataset retrain : str     Whether to retrain the query model. Options are \"partial\", \"full\" or \"none\"</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.save","title":"<code>save(output_dir)</code>","text":"<p>Save the mapper object to disk</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.save--parameters","title":"Parameters","text":"<p>output_dir : str     The directory to save the mapper object</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.transfer_labels","title":"<code>transfer_labels(label_key)</code>","text":"<p>Transfer labels from the reference dataset to the query dataset</p>"},{"location":"api/map/AtlasMapper/#hnoca.map.mapper.AtlasMapper.transfer_labels--parameters","title":"Parameters","text":"<p>label_key : str     The column in the reference dataset to transfer</p>"},{"location":"api/snapseed/annotate/","title":"annotate","text":""},{"location":"api/snapseed/annotate/#hnoca.snapseed.annotate.annotate","title":"<code>hnoca.snapseed.annotate.annotate(adata, marker_dict, group_name, layer=None, **kwargs)</code>","text":"<p>Annotate clusters based on a manually defined cell type markers.</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>AnnData</code> <p>AnnData object</p> required <code>marker_dict</code> <code>dict</code> <p>Dict with marker genes for each celltype</p> required <code>group_name</code> <code>str</code> <p>Name of the column in adata.obs that contains the cluster labels</p> required <code>layer</code> <code>str</code> <p>Layer in adata to use for expression</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments to pass to the annotation function.</p> <code>{}</code> <p>Returns:</p> Type Description <p>pd.DataFrame with assignments</p>"},{"location":"api/snapseed/annotate_hierarchy/","title":"annotate_hierarchy","text":""},{"location":"api/snapseed/annotate_hierarchy/#hnoca.snapseed.annotate.annotate_hierarchy","title":"<code>hnoca.snapseed.annotate.annotate_hierarchy(adata, marker_hierarchy, group_name, layer=None, min_expr=0.1, **kwargs)</code>","text":"<p>Annotate clusters based on a manually defined cell type and marker hierarchy.</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>AnnData</code> <p>AnnData object</p> required <code>marker_hierarchy</code> <code>dict</code> <p>dict arker genes for each celltype arranged hierarchically.</p> required <code>group_name</code> <code>str</code> <p>Name of the column in adata.obs that contains the cluster labels</p> required <code>layer</code> <code>str</code> <p>Layer in adata to use for expression</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments to pass to the annotation function.</p> <code>{}</code> <p>Returns:</p> Type Description <p>Dict with assignments and metrics</p>"},{"location":"api/snapseed/find_markers/","title":"find_markers","text":""},{"location":"api/snapseed/find_markers/#hnoca.snapseed.markers.find_markers","title":"<code>hnoca.snapseed.markers.find_markers(adata, group_name, features=None, layer=None)</code>","text":"<p>Find markers for each cluster.</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <p>AnnData object</p> required <code>group_name</code> <p>Name of the column in adata.obs that contains the cluster labels</p> required <code>features</code> <p>List of features to use for marker identification</p> <code>None</code> <code>layer</code> <p>Layer in adata to use for expression</p> <code>None</code> <p>Returns:</p> Type Description <p>DataFrame with AUROC and detection ratio for each gene and cluster.</p>"},{"location":"api/stats/test_de/","title":"test_de","text":""},{"location":"api/stats/test_de/#hnoca.stats.de.test_de","title":"<code>hnoca.stats.de.test_de(adata, group, covar, num_threads=1, return_coef_group=None, var_names=None, adjust_method='holm')</code>","text":"<p>Test for differential expression using ANOVA</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>AnnData</code> <p>AnnData object</p> required <code>group</code> <code>Union[str, Series]</code> <p>str or pd.Series The group labels</p> required <code>covar</code> <code>Union[str, DataFrame]</code> <p>str or pd.DataFrame The covariates</p> required <code>num_threads</code> <code>int</code> <p>int The number of threads to use</p> <code>1</code> <code>return_coef_group</code> <code>str</code> <p>str The group to return coefficients for</p> <code>None</code> <code>var_names</code> <code>list</code> <p>list The variable names to test</p> <code>None</code> <code>adjust_method</code> <code>str</code> <p>str The method to adjust p-values. See https://www.statsmodels.org/dev/generated/statsmodels.stats.multitest.multipletests.html</p> <code>'holm'</code> <p>Returns:</p> Type Description <p>pd.DataFrame The differential expression results</p>"},{"location":"api/stats/test_de_paired/","title":"test_de_paired","text":""},{"location":"api/stats/test_de_paired/#hnoca.stats.de.test_de_paired","title":"<code>hnoca.stats.de.test_de_paired(query_adata, matched_adata, covar, num_threads=1, var_names=None, adjust_method='holm')</code>","text":"<p>Test for differential expression between query data and matches reference cells using an F-test.</p> <p>Parameters:</p> Name Type Description Default <code>query_adata</code> <code>AnnData</code> <p>AnnData object The query data</p> required <code>matched_adata</code> <code>AnnData</code> <p>AnnData object The matched reference data</p> required <code>covar</code> <code>Union[str, DataFrame]</code> <p>str or pd.DataFrame The covariates</p> required <code>num_threads</code> <code>int</code> <p>int The number of threads to use</p> <code>1</code> <code>var_names</code> <code>list</code> <p>list The variable names to test</p> <code>None</code> <code>adjust_method</code> <code>str</code> <p>str The method to adjust p-values. See https://www.statsmodels.org/dev/generated/statsmodels.stats.multitest.multipletests.html</p> <code>'holm'</code> <p>Returns:</p> Type Description <p>pd.DataFrame The differential expression results</p>"}]}